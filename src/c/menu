/*  File: menu.c
 *  Part of TailWimp Lite
 *  Copyright (C) 2021  Andreas Skyman (Bumbarrel Computing)
 * 
 *  Many features in this program are highly derivative of Steve Fryatt's
 *  examples from http://www.stevefryatt.org.uk/risc-os/wimp-prog which
 *  have been relicensed from European Union Public License v1.2 for the
 *  purpose of this program.
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include <stddef.h>
#include <stdlib.h>
#include <string.h>

#include "oslib/wimp.h"

#include "ibar.h"
#include "menu.h"

// Global variables:
static wimp_menu* menu_current_menu = NULL;
static void (*menu_current_callback)(
    wimp_menu* menu,
    wimp_selection* selection
) = NULL;


// Menu creation:
wimp_menu *menu_create(char *title, int entries)
{
    wimp_menu* menu         = NULL;
    wimp_menu_entry    *entry     = NULL;
    char *buffer             = NULL;
    int    len, size;

    // A menu must have at least one entry:
    if (entries < 1) {
        return NULL;
    }

    // Allocate the menu definition block:
    size = wimp_SIZEOF_MENU(entries);

    menu = malloc(size);
    if (menu == NULL) {
        return NULL;
    }

    // Set up the menu title:

    len = strlen(title);
    if (len > 12) {
        buffer = malloc(len + 1);
    }

    if (buffer != NULL) {
        strncpy(buffer, title, len);
        buffer[len] = '\0';
        menu->title_data.indirected_text.text = buffer;
    } else {
        strncpy(menu->title_data.text, title, 12);
    }

    // Set up the remainder of the menu header:
    menu->title_fg = wimp_COLOUR_BLACK;
    menu->title_bg = wimp_COLOUR_LIGHT_GREY;
    menu->work_fg = wimp_COLOUR_BLACK;
    menu->work_bg = wimp_COLOUR_WHITE;
    menu->width = 16;
    menu->height = wimp_MENU_ITEM_HEIGHT;
    menu->gap = wimp_MENU_ITEM_GAP;

    // Initialise the menu entries:
    entry = menu->entries;

    while (entries-- > 0) {
        entry->menu_flags = (entries > 0) ? 0 : wimp_MENU_LAST;
        entry->sub_menu = NULL;
        entry->icon_flags = wimp_ICON_TEXT
                            | wimp_ICON_FILLED
                            | (wimp_COLOUR_BLACK << wimp_ICON_FG_COLOUR_SHIFT)
                            | (wimp_COLOUR_WHITE << wimp_ICON_BG_COLOUR_SHIFT);
        strncpy(entry->data.text, "", 12);

        entry++;
    }

    // Set the title indirection flag:
    if (buffer != NULL) {
        menu->entries[0].menu_flags |= wimp_MENU_TITLE_INDIRECTED;
    }

    return menu;
}


// Menu entry configuration:
void menu_entry(wimp_menu *menu, int entry, char *text, wimp_menu *sub_menu)
{
    wimp_menu_entry *definition = NULL;
    char        *buffer = NULL;
    int        len, width;

    if (menu == NULL || text == NULL)
        return;

    // Update the menu entry definition:
    definition = menu->entries + entry;

    // Set up the menu text:
    len = strlen(text);
    if (len > 12)
        buffer = malloc(len + 1);

    if (buffer != NULL) {
        strncpy(buffer, text, len);
        buffer[len] = '\0';
        definition->data.indirected_text.text = text;
        definition->data.indirected_text.validation = "";
        definition->data.indirected_text.size = len + 1;
        definition->icon_flags |= wimp_ICON_INDIRECTED;
    } else {
        strncpy(definition->data.text, text, 12);
    }

    definition->sub_menu = sub_menu;

    // Recalculate the menu width:
    width = (16 * strlen(text)) + 16;
    if (width > menu->width)
        menu->width = width;
}


// Message_MenusDeleted event handler:
osbool menu_message_menus_deleted(wimp_message* message) {
    wimp_full_message_menus_deleted* deleted =
        (wimp_full_message_menus_deleted*) message;

    // Check that the deleted menu is ours:
    if (deleted == NULL || deleted->menu != menu_current_menu) {
        return FALSE;
    }

    // Clear our saved menu details:
    menu_current_menu = NULL;
    menu_current_callback = NULL;

    return TRUE;
}


// Handle selection event:
void menu_process_event(wimp_selection* selection) {
    wimp_pointer     pointer;
    os_error*         error;

    // Read the mouse button used to make the selection:
    error = xwimp_get_pointer_info(&pointer);
    if (error != NULL)
            pointer.buttons = wimp_CLICK_SELECT;

    if (menu_current_callback != NULL && selection != NULL) {
        menu_current_callback(menu_current_menu, selection);
    }

    // Clear our saved menu details, unless Adjust click:
    if (menu_current_menu != NULL && pointer.buttons == wimp_CLICK_ADJUST) {
        xwimp_create_menu(menu_current_menu, 0, 0);
    } else {
        menu_current_menu = NULL;
        menu_current_callback = NULL;
    }
}


// Open an iconbar menu:
void menu_open_ibar(
    wimp_menu* menu,
    wimp_pointer* pointer,
    void (*callback)(wimp_menu* menu, wimp_selection* selection)
) {
    menu_current_menu = menu;
    menu_current_callback = callback;

    wimp_create_menu(ibar_menu, pointer->pos.x - 64, 228);
}
