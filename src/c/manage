/*  File: manage.c
 *  Part of TailWimp Lite
 *  Copyright (C) 2021  Andreas Skyman (Bumbarrel Computing)
 * 
 *  Many features in this program are highly derivative of Steve Fryatt's
 *  examples from http://www.stevefryatt.org.uk/risc-os/wimp-prog which
 *  have been relicensed from European Union Public License v1.2 for the
 *  purpose of this program.
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "oslib/wimp.h"

#include "choices.h"
#include "manage.h"
#include "report.h"
#include "screen.h"
#include "tailwimp.h"
#include "wininfo.h"


// Global variables:
screen_dim dimensions;


// Function prototypes:
static void manage_window_to_centre(
    wimp_window_state*  state,
    wininfo*            info
);
static void manage_window_to_off_screen(
    wimp_window_state*  state,
    wininfo*            info
);
static void manage_window_to_left(
    wimp_window_state*  state,
    wininfo*            info
);
static void manage_window_to_right(
    wimp_window_state*  state,
    wininfo*            info
);
static void manage_window_to_top(
    wimp_window_state*  state,
    wininfo*            info
);
static void manage_window_to_bottom(
    wimp_window_state*  state,
    wininfo*            info;
);
static void manage_window_max_width(
    wimp_window_state*  state,
    wininfo*            info
);
static void manage_window_max_height(
    wimp_window_state*  state,
    wininfo*            info
);


// Manage windows:
void manage_window(wimp_w handle, direction dir) {
    wininfo           info = wininfo_get_info(handle);
    wimp_window_state state;

    screen_get_dim(&dimensions);

    state.w = handle;
    wimp_get_window_state(&state);
    state.next = wimp_TOP;

    switch (dir) {
    case manage_OFF:
        manage_window_to_off_screen(&state, &info);
        state.next = wimp_BOTTOM;
        break;
    case manage_CENTRE:
        manage_window_to_centre(&state, &info);
        break;
    case manage_LEFT:
        manage_window_to_left(&state, &info);
        break;
    case manage_RIGHT:
        manage_window_to_right(&state, &info);
        break;
    case manage_TOP:
        manage_window_to_top(&state, &info);
        break;
    case manage_BOTTOM:
        manage_window_to_bottom(&state, &info);
        break;
    default:
        break;
    }

    wimp_open_window((wimp_open*) &state);
}


///////////////////////////////
/* Window movement functions */
///////////////////////////////

// Centre window on screen:
static void manage_window_to_centre(
    wimp_window_state*  state,
    wininfo*            info
) {
    int         width, height;

    width = state->visible.x1 - state->visible.x0;
    height = state->visible.y1 - state->visible.y0;

    state->visible.x0 = (dimensions.width - width) / 2;
    state->visible.y0 = (dimensions.height - height) / 2;

    state->visible.x1 = state->visible.x0 + width;
    state->visible.y1 = state->visible.y0 + height;
}


// Put window off screen:
static void manage_window_to_off_screen(
    wimp_window_state*  state,
    wininfo*            info
) {
    int width, height;

    width = state->visible.x1 - state->visible.x0;
    height = state->visible.y1 - state->visible.y0;

    state->visible.x0 = -(width + 42);
    state->visible.y0 = -(height + 42);

    state->visible.x1 = state->visible.x0 + width;
    state->visible.y1 = state->visible.y0 + height;

    if ((state->flags & wimp_WINDOW_MOVEABLE) != 0) {
        state->flags &= !wimp_WINDOW_MOVEABLE;
    }
}


// Move window to the left of the screen:
static void manage_window_to_left(
    wimp_window_state*  state,
    wininfo*            info
) {
    screen_padding* pad = app_choices.padding;
    int             width, height;

    if (info->is_left || !(info->is_top || info->is_bottom)) {
        manage_window_max_height(state, info);
    }

    width = (dimensions.width - pad->left - pad->right) / 2
            - info->has_vscroll * DECO_PADDING;
    if (width > info->width_full) {
        width = info->width_full;
    }

    state->visible.x0 = pad->left;
    state->visible.x1 = pad->left + width;
};


// Move window to the right of the screen:
static void manage_window_to_right(
    wimp_window_state*  state,
    wininfo*            info
) {
    screen_padding* pad = app_choices.padding;
    int             width, height;

    if (info->is_right || !(info->is_top || info->is_bottom)) {
        manage_window_max_height(state, info);
    }

    width = (dimensions.width - pad->left - pad->right) / 2
            - info->has_vscroll * DECO_PADDING;
    if (width > info->width_full) {
        width = info->width_full;
    }

    state->visible.x0 = dimensions.width - width - pad->right
                        - info->has_vscroll * DECO_PADDING;
    state->visible.x1 = dimensions.width - pad->right
                        - info->has_vscroll * DECO_PADDING;
};


// Move window to the top of the screen:
static void manage_window_to_top(
    wimp_window_state*  state,
    wininfo*            info
) {
    screen_padding* pad = app_choices.padding;
    int             width, height;

    if (info->is_top || !(info->is_left || info->is_right)) {
        manage_window_max_width(state, info);
    }

    height = (dimensions.height - pad->top - pad->bottom) / 2
             - (info->has_hscroll + info->has_headrow) * DECO_PADDING;
    if (height > info->height_full) {
        height = info->height_full;
    }
    state->visible.y0 = dimensions.height - height - pad->top
                        - info->has_headrow * DECO_PADDING;
    state->visible.y1 = dimensions.height - pad->top
                        - info->has_headrow * DECO_PADDING;
}


// Move window to the bottom of the screen:
static void manage_window_to_bottom(
    wimp_window_state*  state,
    wininfo*            info
) {
    screen_padding* pad = app_choices.padding;
    int             width, height;

    if (info->is_bottom || !(info->is_left || info->is_right)) {
        manage_window_max_width(state, info);
    }

    height = (dimensions.height - pad->top - pad->bottom) / 2
             - (info->has_hscroll + info->has_headrow) * DECO_PADDING;
    if (height > info->height_full) {
        height = info->height_full;
    }
    state->visible.y0 = pad->bottom + info->has_hscroll * DECO_PADDING;
    state->visible.y1 = pad->bottom + height + info->has_hscroll * DECO_PADDING;
}


/////////////////////////////
/* Window resize functions */
/////////////////////////////

// Maximize window width:
static void manage_window_max_width(
    wimp_window_state*  state,
    wininfo*            info
) {
    screen_padding* pad = app_choices.padding;

    state->visible.x0 = pad->left;
    state->visible.x1 = dimensions.width - pad->right
                        - info->has_vscroll * DECO_PADDING;
};


// Maximize window height:
static void manage_window_max_height(
    wimp_window_state*  state,
    wininfo*            info
) {
    screen_padding* pad = app_choices.padding;

    state->visible.y0 = pad->bottom
                        + info->has_hscroll * DECO_PADDING;
    state->visible.y1 = dimensions.height - pad->top
                        - info->has_headrow * DECO_PADDING;
};
