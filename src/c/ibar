/*  File: ibar.c
 *  Part of TailWimp Lite
 *  Copyright (C) 2021  Andreas Skyman (Bumbarrel Computing)
 * 
 *  Many features in this program are highly derivative of Steve Fryatt's
 *  examples from http://www.stevefryatt.org.uk/risc-os/wimp-prog which
 *  have been relicensed from European Union Public License v1.2 for the
 *  purpose of this program.
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "oslib/wimp.h"

#include "appwin.h"
#include "choices.h"
#include "ibar.h"
#include "manage.h"
#include "menu.h"
#include "report.h"
#include "tailwimp.h"


// Program info icons:
# define IBAR_PROGINFO_ICON_NAME    0
# define IBAR_PROGINFO_ICON_PURPOSE 1
# define IBAR_PROGINFO_ICON_AUTHOR  2
# define IBAR_PROGINFO_ICON_VERSION 3
# define IBAR_PROGINFO_ICON_BBL     4

// Icon bar menu entries:
# define IBAR_MENU_ENTRIES  5
# define IBAR_MENU_INFO     0
# define IBAR_MENU_CHOICES  1
# define IBAR_MENU_HELP     2
# define IBAR_MENU_NOTES    3
# define IBAR_MENU_QUIT     4

//  Global variables:
wimp_menu*  ibar_menu;


// Function prototypes:
static void ibar_menu_selection(wimp_menu *menu, wimp_selection *selection);
static void ibar_open_help(void);
static void ibar_open_release_notes(void);
static osbool ibar_init_menu(wimp_w prop_info);
static wimp_w ibar_init_prog_info(osspriteop_area* sprites);


// Icon bar initialisation:
void ibar_initialise(osspriteop_area* sprites) {
    os_error*           error;
    wimp_icon_create    icon_bar;
    wimp_w              prog_info;

    // Application Info window:
    prog_info = ibar_init_prog_info(sprites);
    if (prog_info == NULL) {
        report_error("Failed to create Info window");
    }

    // Application Choices window:
    app_choices_handle = choices_init_choices();
    if (app_choices_handle == NULL) {
        report_error("Failed to create Choices window");
    }

    // Icon bar menu:
    if (!ibar_init_menu(prog_info)) {
        report_error("Failed to create Icon bar menu");
    }

    // Icon bar icon:
    icon_bar.w = wimp_ICON_BAR_RIGHT;
    icon_bar.icon.extent.x0 = 0;
    icon_bar.icon.extent.y0 = 0;
    icon_bar.icon.extent.x1 = 68;
    icon_bar.icon.extent.y1 = 68;
    icon_bar.icon.flags = wimp_ICON_SPRITE
                          | (wimp_BUTTON_CLICK << wimp_ICON_BUTTON_TYPE_SHIFT);
    strncpy(
        icon_bar.icon.data.sprite,
        APP_NAME,
        osspriteop_NAME_LIMIT
    );

    error = xwimp_create_icon(&icon_bar, NULL);
    if (error != NULL) {
        report_os_error(error);
        return;
    }
}


// Handle mouse click on icon bar:
void ibar_mouse_click(wimp_pointer* pointer) {
    switch (pointer->buttons) {
    case wimp_CLICK_SELECT:
        appwin_open(app_handle, manage_OFF);
        break;
    case wimp_CLICK_MENU:
        menu_open_ibar(ibar_menu, pointer, ibar_menu_selection);
        break;
    case wimp_CLICK_ADJUST:
        break;
    default:
        break;
    }
}


// Initialise icon bar menu:
static osbool ibar_init_menu(wimp_w prog_info) {
    ibar_menu = menu_create(APP_TITLE, IBAR_MENU_ENTRIES);
    if (ibar_menu == NULL) {
        return FALSE;
    }
    menu_entry(ibar_menu, IBAR_MENU_INFO,       "Info", (wimp_menu*) prog_info);
    menu_entry(ibar_menu, IBAR_MENU_CHOICES,    "Choices...", NULL);
    menu_entry(ibar_menu, IBAR_MENU_HELP,       "Help...", NULL);
    menu_entry(ibar_menu, IBAR_MENU_NOTES,      "Release notes...", NULL);
    menu_entry(ibar_menu, IBAR_MENU_QUIT,       "Quit", NULL);

    return TRUE;
}


// Handle menu selection:
static void ibar_menu_selection(
    wimp_menu*      menu,
    wimp_selection* selection
) {
    switch (selection->items[0]) {
    case IBAR_MENU_INFO:
        break;
    case IBAR_MENU_CHOICES:
        appwin_open(app_choices_handle, manage_CENTRE);
        break;
    case IBAR_MENU_HELP:
        ibar_open_help();
        break;
    case IBAR_MENU_NOTES:
        ibar_open_release_notes();
        break;
    case IBAR_MENU_QUIT:
        main_quit_flag = TRUE;
        break;
    default:
        break;
    }
}


// Open application help:
static void ibar_open_help(void) {
    os_error* error;

    error = xos_cli("%Filer_Run " APP_DIR ".!Help");
    if (error != NULL) {
        report_os_error(error);
    }
}


// Open application release notes:
static void ibar_open_release_notes(void) {
    os_error* error;

    error = xos_cli("%Filer_Run " APP_DIR ".ReleaseNotes");
    if (error != NULL) {
        report_os_error(error);
    }
}


// Initialise application info window:
static wimp_w ibar_init_prog_info(osspriteop_area* sprites) {
    wimp_w              prog_info;
    wimp_window*        window_definition;
    wimp_icon*          icons;
    char*               text;
    int                 size;

    window_definition = appwin_load_template("ProgInfo");
    if (window_definition == NULL) {
        return NULL;
    }
    icons = window_definition->icons;
    for (int i = 0; i < window_definition->icon_count; i++) {
        text = icons[i].data.indirected_text.text;
        size = icons[i].data.indirected_text.size;
        switch (i) {
        case IBAR_PROGINFO_ICON_NAME:
            strncpy(text, APP_TITLE, size);
            text[size - 1] = '\0';
            break;
        case IBAR_PROGINFO_ICON_PURPOSE:
            strncpy(text, APP_PURPOSE, size);
            text[size - 1] = '\0';
            break;
        case IBAR_PROGINFO_ICON_AUTHOR:
            strncpy(text, APP_AUTHOR, size);
            text[size - 1] = '\0';
            break;
        case IBAR_PROGINFO_ICON_VERSION:
            strncpy(text, APP_VERSION " (" APP_DATE ")", size);
            text[size - 1] = '\0';
            break;
        case IBAR_PROGINFO_ICON_BBL:
            icons[i].data.indirected_sprite.area = sprites;
            break;
        default:
            break;
        }
    } 

    prog_info = wimp_create_window(window_definition);
    free(window_definition);
    return prog_info;
}
