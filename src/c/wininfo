/*  File: wininfo.c
 *  Part of TailWimp Lite
 *  Copyright (C) 2021  Andreas Skyman (Bumbarrel Computing)
 * 
 *  Many features in this program are highly derivative of Steve Fryatt's
 *  examples from http://www.stevefryatt.org.uk/risc-os/wimp-prog which
 *  have been relicensed from European Union Public License v1.2 for the
 *  purpose of this program.
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "oslib/wimp.h"

#include "appwin.h"
#include "report.h"
#include "screen.h"
#include "tailwimp.h"
#include "wininfo.h"


// Global variables:
screen_dim dimensions;


// Function prototypes:
static osbool wininfo_window_is_manageable(wimp_window_state* state);
static osbool wininfo_window_is_left(wimp_window_info* info);
static osbool wininfo_window_is_right(wimp_window_info* info);
static osbool wininfo_window_is_top(wimp_window_info* info);
static osbool wininfo_window_is_bottom(wimp_window_info* info);


// Get active window:
wimp_w wininfo_get_active_window(void) {
    wimp_window_state   state;
    wimp_w              handle = wimp_BOTTOM;

    state.next = handle;
    while(state.next != wimp_TOP) {
        state.w = state.next;
        wimp_get_window_state(&state);

        if (wininfo_window_is_manageable(&state)) {
            handle = state.w;
        }
    }
    
    return handle;
}


wininfo wininfo_get_info(wimp_w handle) {
    wimp_window_info    wimp_wininfo;
    wininfo             info;

    screen_get_dim(&dimensions);
    wimp_wininfo.w = handle;
    wimp_get_window_info(&wimp_wininfo);

    info.is_left        = wininfo_window_is_left(&wimp_wininfo)
                          && !wininfo_window_is_right(&wimp_wininfo);
    info.is_right       = wininfo_window_is_right(&wimp_wininfo)
                          && !wininfo_window_is_left(&wimp_wininfo);
    info.is_top         = wininfo_window_is_top(&wimp_wininfo)
                          && !wininfo_window_is_bottom(&wimp_wininfo);
    info.is_bottom      = wininfo_window_is_bottom(&wimp_wininfo)
                          && !wininfo_window_is_top(&wimp_wininfo);
    info.has_headrow    = (wimp_wininfo.flags & wimp_WINDOW_TITLE_ICON) != 0;
    info.has_hscroll    = (wimp_wininfo.flags & wimp_WINDOW_HSCROLL) != 0;
    info.has_vscroll    = (wimp_wininfo.flags & wimp_WINDOW_VSCROLL) != 0;
    info.width_current  = wimp_wininfo.visible.x1 - wimp_wininfo.visible.x0;
    info.height_current = wimp_wininfo.visible.y1 - wimp_wininfo.visible.y0;
    info.width_full     = wimp_wininfo.extent.x1 - wimp_wininfo.extent.x0;
    info.height_full    = wimp_wininfo.extent.y1 - wimp_wininfo.extent.y0;

    return info;
}


static osbool wininfo_window_is_manageable(wimp_window_state* state) {
    return (state->flags & wimp_WINDOW_MOVEABLE)
           && !(state->flags & (
                wimp_WINDOW_PANE
                | wimp_WINDOW_BACK
                | wimp_WINDOW_FURNITURE_WINDOW
                | wimp_WINDOW_FOREGROUND_WINDOW
    ));
}


// Window is on the left of the screen:
static osbool wininfo_window_is_left(
    wimp_window_info* info
) {
    screen_padding* pad = app_choices.padding;
    return info->visible.x0 - pad->left == 0;
}


// Window is on the right of the screen:
static osbool wininfo_window_is_right(
    wimp_window_info* info
) {
    screen_padding* pad = app_choices.padding;
    int scroll_pad = ((info->flags | wimp_WINDOW_VSCROLL) != 0) * DECO_PADDING;
    
    return info->visible.x1 + pad->right + scroll_pad == dimensions.width;
}


// Window is at the top of the screen:
static osbool wininfo_window_is_top(
    wimp_window_info* info
) {
    screen_padding* pad = app_choices.padding;
    int header_pad = ((info->flags | wimp_WINDOW_VSCROLL) != 0) * DECO_PADDING;

    return info->visible.y1 + pad->top + header_pad == dimensions.height;
}


// Window is at the bottom of the screen:
static osbool wininfo_window_is_bottom(
    wimp_window_info* info
) {
    screen_padding* pad = app_choices.padding;
    int scroll_pad = ((info->flags | wimp_WINDOW_HSCROLL) != 0) * DECO_PADDING;

    return info->visible.y0 - pad->bottom - scroll_pad == 0;
}
