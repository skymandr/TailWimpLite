/*  File: choices.c
 *  Part of TailWimp Lite
 *  Copyright (C) 2021  Andreas Skyman (Bumbarrel Computing)
 * 
 *  Many features in this program are highly derivative of Steve Fryatt's
 *  examples from http://www.stevefryatt.org.uk/risc-os/wimp-prog which
 *  have been relicensed from European Union Public License v1.2 for the
 *  purpose of this program.
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include <stdlib.h>
#include <string.h>

#include "oslib/wimp.h"

#include "appwin.h"
#include "choices.h"
#include "screen.h"
#include "sfconfig.h"
#include "tailwimp.h"


// Choice icons:
# define IBAR_CHOICES_ICON_LEFT     2
# define IBAR_CHOICES_ICON_RIGHT    3
# define IBAR_CHOICES_ICON_TOP      4
# define IBAR_CHOICES_ICON_BOTTOM   5
# define IBAR_CHOICES_ICON_MODKEY   6
# define IBAR_CHOICES_ICON_SET      7
# define IBAR_CHOICES_ICON_DEFAULT  8
# define IBAR_CHOICES_ICON_CANCEL   9
# define IBAR_CHOICES_BUFFER_LEN    7


// Function prototypes:
static void choices_icons_init(wimp_icon* icons, int icon_count);
static void choices_icons_set(wimp_w handle);
static void choices_icons_reset(wimp_w handle);
static void choices_icon_set_int(wimp_w handle, wimp_i icon, int value);
static int  choices_icon_get_int(wimp_w handle, wimp_i icon);


/////////////////////
/* Choices backend */
/////////////////////

// Get choices:
void choices_get(choices* choices, screen_padding* padding) {
    choices->mod_key    = config_int_read("modkey");
    choices->padding    = padding;
    padding->left       = config_int_read("pad_left");
    padding->right      = config_int_read("pad_right");
    padding->top        = config_int_read("pad_top");
    padding->bottom     = config_int_read("pad_bottom");
}


// Initialise choices:
osbool choices_init(void) {
    if (!config_initialise(APP_TITLE, APP_CHOICES, APP_DIR)) {
        return FALSE;
    }

    config_int_init("modkey",       CHOICES_MODKEY);
    config_int_init("pad_left",     CHOICES_PAD_LEFT);
    config_int_init("pad_right",    CHOICES_PAD_RIGHT);
    config_int_init("pad_top",      CHOICES_PAD_RIGHT);
    config_int_init("pad_bottom",   CHOICES_PAD_BOTTOM);

    choices_load();

    return TRUE;
}


// Set default choices:
void choices_set_defaults(void) {
    config_int_set("modkey",        CHOICES_MODKEY);
    config_int_set("pad_left",      CHOICES_PAD_LEFT);
    config_int_set("pad_right",     CHOICES_PAD_RIGHT);
    config_int_set("pad_top",       CHOICES_PAD_RIGHT);
    config_int_set("pad_bottom",    CHOICES_PAD_BOTTOM);
}


// Load choices from disk or default:
osbool choices_load(void) {
    if (!config_load()) {
        choices_set_defaults();
        return FALSE;
    }
    return TRUE;
}


// Write choices to disk:
osbool choices_save(void) {
    return config_save();
}


//////////////////////
/* Choices frontend */
//////////////////////

// Initialise application choices window:
wimp_w choices_init_choices(void) {
    wimp_window*        window_definition;

    window_definition = appwin_load_template("Choices");
    if (window_definition == NULL) {
        return FALSE;
    }

    choices_icons_init(
        window_definition->icons,
        window_definition->icon_count
    );

    app_choices_handle = wimp_create_window(window_definition);
    free(window_definition);
    wimp_set_icon_state(
        app_choices_handle,
        IBAR_CHOICES_ICON_MODKEY,
        wimp_ICON_SELECTED,
        wimp_ICON_SELECTED
    );

    return app_choices_handle;
}


// Set Choices icon values to initial state:
static void choices_icons_init(wimp_icon* icons, int icon_count) {
    char*               text;
    char                ftext[IBAR_CHOICES_BUFFER_LEN];
    int                 size;

    for (int i = 0; i < icon_count; i++) {
        text = icons[i].data.indirected_text.text;
        size = icons[i].data.indirected_text.size;
        switch (i) {
        case IBAR_CHOICES_ICON_LEFT:
            sprintf(ftext, "%d", app_choices.padding->left);
            strncpy(text, ftext, size);
            text[size - 1] = '\0';
            break;
        case IBAR_CHOICES_ICON_RIGHT:
            sprintf(ftext, "%d", app_choices.padding->right);
            strncpy(text, ftext, size);
            text[size - 1] = '\0';
            break;
        case IBAR_CHOICES_ICON_TOP:
            sprintf(ftext, "%d", app_choices.padding->top);
            strncpy(text, ftext, size);
            text[size - 1] = '\0';
            break;
        case IBAR_CHOICES_ICON_BOTTOM:
            sprintf(ftext, "%d", app_choices.padding->bottom);
            strncpy(text, ftext, size);
            text[size - 1] = '\0';
            break;
        case IBAR_CHOICES_ICON_MODKEY:
            break;
        default:
            break;
        }
    }
}


// Handle mouse click in Choices
void choices_mouse_click(wimp_pointer* pointer) {
    wimp_window_info    window;
    osbool              close = FALSE;

    switch (pointer->buttons) {
    case wimp_CLICK_MENU:
        return;
    case wimp_CLICK_SELECT:
        close = TRUE;
    }

    // TODO:
    // in functions written for it, use
    // window.w = pointer->w;
    // wimp_get_window_info_header_only(&window);
    // to get icon_count, then loop over them with a switch
    // as in init_icons
    // but use get_icon_state and set_icon_state..?
    // take inspiration from sflib

    switch (pointer->i) {
    case IBAR_CHOICES_ICON_SET:
        // Set settings from icons to file and memory:
        choices_icons_set(pointer->w);
        choices_save();
        choices_get(&app_choices, &app_padding);
        break;
    case IBAR_CHOICES_ICON_DEFAULT:
        // Reset icons to default settings and save to file and memory:
        choices_set_defaults();
        choices_save();
        choices_get(&app_choices, &app_padding);
        choices_icons_reset(pointer->w);
        break;
    case IBAR_CHOICES_ICON_CANCEL:
        // Reset icon states from mem:
        choices_icons_reset(pointer->w);
        break;
    default:
        return;
    }

    if (close) {
        wimp_close_window(pointer->w);
    }
}


// Set Choices from icon values:
static void choices_icons_set(wimp_w handle) {
    wimp_window_info    window;
    int                 value;

    window.w = handle;
    wimp_get_window_info_header_only(&window);

    for (int i = 0; i < window.icon_count; i++) {
        switch (i) {
        case IBAR_CHOICES_ICON_LEFT:
            value = choices_icon_get_int(handle, (wimp_i) i);
            config_int_set("pad_left", value);
            choices_icon_set_int(handle, (wimp_i) i, value);
            break;
        case IBAR_CHOICES_ICON_RIGHT:
            value = choices_icon_get_int(handle, (wimp_i) i);
            config_int_set("pad_right", value);
            choices_icon_set_int(handle, (wimp_i) i, value);
            break;
        case IBAR_CHOICES_ICON_TOP:
            value = choices_icon_get_int(handle, (wimp_i) i);
            config_int_set("pad_top", value);
            choices_icon_set_int(handle, (wimp_i) i, value);
            break;
        case IBAR_CHOICES_ICON_BOTTOM:
            value = choices_icon_get_int(handle, (wimp_i) i);
            config_int_set("pad_bottom", value);
            choices_icon_set_int(handle, (wimp_i) i, value);
            break;
        default:
            break;
        }
    }
}


// Set reset Choices icons from current state:
static void choices_icons_reset(wimp_w handle) {
    wimp_window_info    window;
    
    window.w = handle;
    wimp_get_window_info_header_only(&window);

    for (int i = 0; i < window.icon_count; i++) {
        switch (i) {
        case IBAR_CHOICES_ICON_LEFT:
            choices_icon_set_int(
                handle, (wimp_i) i,
                app_choices.padding->left
            );
            break;
        case IBAR_CHOICES_ICON_RIGHT:
            choices_icon_set_int(
                handle, (wimp_i) i,
                app_choices.padding->left
            );
            break;
        case IBAR_CHOICES_ICON_TOP:
            choices_icon_set_int(
                handle, (wimp_i) i,
                app_choices.padding->top
            );
            break;
        case IBAR_CHOICES_ICON_BOTTOM:
            choices_icon_set_int(
                handle, (wimp_i) i,
                app_choices.padding->bottom
            );
            break;
        default:
            break;
        }
    }
}


// Set icon integer value:
static void choices_icon_set_int(wimp_w handle, wimp_i icon, int value) {
    char*               text;
    char                ftext[IBAR_CHOICES_BUFFER_LEN];
    int                 size;
    wimp_icon_state     icon_state;

    icon_state.w = handle;
    icon_state.i = icon;
    wimp_get_icon_state(&icon_state);

    text = icon_state.icon.data.indirected_text.text;
    size = icon_state.icon.data.indirected_text.size;
    if (size > IBAR_CHOICES_BUFFER_LEN) {
        size = IBAR_CHOICES_BUFFER_LEN;
    }

    sprintf(ftext, "%d", value);
    strncpy(text, ftext, size);
    text[size - 1] = '\0';

    wimp_set_icon_state(handle, icon, 0, 0);
}


// Get icon integer_value:
static int choices_icon_get_int(wimp_w handle, wimp_i icon) {
    char*               text;
    int                 size;

    wimp_icon_state     icon_state;

    icon_state.w = handle;
    icon_state.i = icon;
    wimp_get_icon_state(&icon_state);

    text = icon_state.icon.data.indirected_text.text;
    size = icon_state.icon.data.indirected_text.size;
    if (size <= 0) {
        return 0;
    }

    return (int) strtol(text, NULL, 10);
}