/*  File: appwin.c
 *  Part of TailWimp Lite
 *  Copyright (C) 2021  Andreas Skyman (Bumbarrel Computing)
 * 
 *  Many features in this program are highly derivative of Steve Fryatt's
 *  examples from http://www.stevefryatt.org.uk/risc-os/wimp-prog which
 *  have been relicensed from European Union Public License v1.2 for the
 *  purpose of this program.
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include <stdlib.h>
#include <string.h>

#include "oslib/osspriteop.h"
#include "oslib/wimp.h"

#include "appwin.h"
#include "manage.h"
#include "report.h"
#include "tailwimp.h"


// Global variables
#define BBL_ICON 0


// Application window initialisation:
wimp_w appwin_initialise(osspriteop_area* sprites) {
    wimp_window*    window_definition;
    wimp_icon*      icons;
    wimp_w          handle;
    char*           title_text;
    int             title_size;

    window_definition = appwin_load_template("TailWimp");
    if (window_definition == NULL) {
        report_error("Failed to load main template");
        return NULL;
    }
    title_text = window_definition->title_data.indirected_text.text;
    title_size = window_definition->title_data.indirected_text.size;
    strncpy(title_text, APP_TITLE, title_size);
    title_text[title_size - 1] = '\0';

    icons = window_definition->icons;
    icons[BBL_ICON].data.indirected_sprite.area = sprites;

    handle = wimp_create_window(window_definition);
    free(window_definition);

    return handle;
}


// Open a window:
void appwin_open(wimp_w handle) {
    wimp_window_state state;

    // Get window state:
    state.w = handle;
    wimp_get_window_state(&state);

    // Set window position or open:
    if (!(state.flags & wimp_WINDOW_OPEN)) {
        manage_window(handle, manage_CENTRE);
    } else {
        state.next = wimp_TOP;
        wimp_open_window((wimp_open*) &state);
    }
}


// Load window template:
wimp_window* appwin_load_template(char* name) {
    wimp_window*    window_def = NULL;
    byte*           ind_data = NULL;
    int             def_size, ind_size, context = 0;
    os_error*       error;

    // Call Wimp_LoadTemplate to request the amounts of memory required:
    error = xwimp_load_template(wimp_GET_SIZE, 0, 0, wimp_NO_FONTS, name, 0,
                                &def_size, &ind_size, &context);
    if (error != NULL || context == 0) {
            return NULL;
    }

    // Allocate the memory and verify that it was available:
    window_def  = malloc(def_size);
    ind_data    = malloc(ind_size);

    if (window_def == NULL || (ind_size > 0 && ind_data == NULL)) {
        if (window_def != NULL) {
            free(window_def);
        }
        if (ind_data != NULL) {
            free(ind_data);
        }

        return NULL;
    }

    // Call Wimp_LoadTemplate again to load the template into our memory:
    error = xwimp_load_template(window_def,
                                (char*) ind_data,
                                (const char*) ind_data+ind_size,
                                wimp_NO_FONTS, name, 0, NULL, NULL, &context);
    if (error != NULL || context == 0) {
        if (window_def != NULL) {
            free(window_def);
        }
        if (ind_data != NULL) {
            free(ind_data);
        }

        return NULL;
    }

    return window_def;
}
